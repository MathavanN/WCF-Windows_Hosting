//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsServiceConsume.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfWindowsService.ExceptionMessage), Action="http://tempuri.org/ICalculator/AdditionExceptionMessageFault", Name="ExceptionMessage", Namespace="http://schemas.datacontract.org/2004/07/WcfWindowsService")]
        int Addition(int number1, int number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        System.Threading.Tasks.Task<int> AdditionAsync(int number1, int number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtraction", ReplyAction="http://tempuri.org/ICalculator/SubtractionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfWindowsService.ExceptionMessage), Action="http://tempuri.org/ICalculator/SubtractionExceptionMessageFault", Name="ExceptionMessage", Namespace="http://schemas.datacontract.org/2004/07/WcfWindowsService")]
        int Subtraction(int number1, int number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtraction", ReplyAction="http://tempuri.org/ICalculator/SubtractionResponse")]
        System.Threading.Tasks.Task<int> SubtractionAsync(int number1, int number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiplication", ReplyAction="http://tempuri.org/ICalculator/MultiplicationResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfWindowsService.ExceptionMessage), Action="http://tempuri.org/ICalculator/MultiplicationExceptionMessageFault", Name="ExceptionMessage", Namespace="http://schemas.datacontract.org/2004/07/WcfWindowsService")]
        int Multiplication(int number1, int number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiplication", ReplyAction="http://tempuri.org/ICalculator/MultiplicationResponse")]
        System.Threading.Tasks.Task<int> MultiplicationAsync(int number1, int number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Division", ReplyAction="http://tempuri.org/ICalculator/DivisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WcfWindowsService.ExceptionMessage), Action="http://tempuri.org/ICalculator/DivisionExceptionMessageFault", Name="ExceptionMessage", Namespace="http://schemas.datacontract.org/2004/07/WcfWindowsService")]
        int Division(int number1, int number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Division", ReplyAction="http://tempuri.org/ICalculator/DivisionResponse")]
        System.Threading.Tasks.Task<int> DivisionAsync(int number1, int number2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : WindowsServiceConsume.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<WindowsServiceConsume.ServiceReference1.ICalculator>, WindowsServiceConsume.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Addition(int number1, int number2) {
            return base.Channel.Addition(number1, number2);
        }
        
        public System.Threading.Tasks.Task<int> AdditionAsync(int number1, int number2) {
            return base.Channel.AdditionAsync(number1, number2);
        }
        
        public int Subtraction(int number1, int number2) {
            return base.Channel.Subtraction(number1, number2);
        }
        
        public System.Threading.Tasks.Task<int> SubtractionAsync(int number1, int number2) {
            return base.Channel.SubtractionAsync(number1, number2);
        }
        
        public int Multiplication(int number1, int number2) {
            return base.Channel.Multiplication(number1, number2);
        }
        
        public System.Threading.Tasks.Task<int> MultiplicationAsync(int number1, int number2) {
            return base.Channel.MultiplicationAsync(number1, number2);
        }
        
        public int Division(int number1, int number2) {
            return base.Channel.Division(number1, number2);
        }
        
        public System.Threading.Tasks.Task<int> DivisionAsync(int number1, int number2) {
            return base.Channel.DivisionAsync(number1, number2);
        }
    }
}
